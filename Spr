To store large commits with detailed information (such as create date, commit hash, added/deleted lines, project name), hereâ€™s how you can design and implement it.

Approach

Similar to open pull requests, create a dedicated table for large commits. Each large commit will be stored as an individual record, with all its associated details, and linked to the team.

Step 1: Database Schema

large_commit Table

This table will store details of large commits associated with team repositories.

CREATE TABLE large_commit (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,  -- Unique identifier for the record
    project_id BIGINT NOT NULL,            -- Repository ID
    project_name VARCHAR(255),             -- Repository name
    commit_hash VARCHAR(255) NOT NULL,     -- Unique hash of the commit
    create_date TIMESTAMP NOT NULL,        -- Commit creation date
    added_lines INT DEFAULT 0,             -- Number of lines added in the commit
    deleted_lines INT DEFAULT 0,           -- Number of lines deleted in the commit
    team_id BIGINT NOT NULL,               -- Foreign key to associate with a team
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Last sync time
    FOREIGN KEY (team_id) REFERENCES feature_team(id)  -- Relation to the feature_team table
);

Step 2: Entity Class

Define an LargeCommit entity in your backend:

@Entity
@Table(name = "large_commit")
public class LargeCommit {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Long projectId;                 // Repository ID
    private String projectName;             // Repository name
    private String commitHash;              // Commit hash
    private LocalDateTime createDate;       // Commit creation date
    private int addedLines;                 // Lines added
    private int deletedLines;               // Lines deleted

    @ManyToOne
    @JoinColumn(name = "team_id", nullable = false)
    private FeatureTeam team;               // Relation to FeatureTeam entity

    private LocalDateTime lastUpdated;      // Data freshness timestamp

    // Getters and setters
}

Step 3: Repository

Create a repository interface for LargeCommit to handle CRUD operations.

@Repository
public interface LargeCommitRepository extends JpaRepository<LargeCommit, Long> {
    List<LargeCommit> findByTeamId(Long teamId);
    List<LargeCommit> findByProjectId(Long projectId);
}

Step 4: Sync Service

Implement a service to:
	1.	Fetch large commits from repositories in a team.
	2.	Identify large commits based on thresholds (e.g., added_lines + deleted_lines > 1000).
	3.	Save or update these records in the large_commit table.

@Service
public class LargeCommitSyncService {

    @Autowired
    private LargeCommitRepository largeCommitRepository;

    @Autowired
    private GitLabApiService gitLabApiService;

    public void syncLargeCommits(FeatureTeam team) {
        // Fetch repositories for the team
        List<Repository> repositories = gitLabApiService.getRepositoriesByTeam(team.getId());

        for (Repository repo : repositories) {
            // Fetch commits for the repository
            List<Commit> commits = gitLabApiService.getCommits(repo.getId());

            for (Commit commit : commits) {
                // Check if the commit qualifies as a large commit
                if (commit.getAddedLines() + commit.getDeletedLines() > 1000) {
                    // Check if the commit already exists
                    LargeCommit largeCommit = largeCommitRepository
                            .findByProjectIdAndCommitHash(repo.getId(), commit.getHash())
                            .orElse(new LargeCommit());

                    // Update or create new record
                    largeCommit.setProjectId(repo.getId());
                    largeCommit.setProjectName(repo.getName());
                    largeCommit.setCommitHash(commit.getHash());
                    largeCommit.setCreateDate(commit.getCreateDate());
                    largeCommit.setAddedLines(commit.getAddedLines());
                    largeCommit.setDeletedLines(commit.getDeletedLines());
                    largeCommit.setTeam(team);
                    largeCommit.setLastUpdated(LocalDateTime.now());

                    // Save to database
                    largeCommitRepository.save(largeCommit);
                }
            }
        }
    }
}

Step 5: Scheduled Job to Refresh Data

Set up a scheduled job to periodically refresh large commit data for all teams.

@Service
public class MetricsRefreshJob {

    @Autowired
    private FeatureTeamRepository featureTeamRepository;

    @Autowired
    private LargeCommitSyncService largeCommitSyncService;

    @Scheduled(cron = "0 0 * * * ?")  // Run every hour
    public void refreshLargeCommitData() {
        // Fetch all teams
        List<FeatureTeam> teams = featureTeamRepository.findAll();

        for (FeatureTeam team : teams) {
            // Sync large commits for the team
            largeCommitSyncService.syncLargeCommits(team);
        }
    }
}

Step 6: API Endpoints

Create API endpoints to:
	1.	Fetch large commit data for a team.
	2.	Fetch large commits for a specific repository if needed.

Controller Example:

@RestController
@RequestMapping("/api/teams")
public class LargeCommitController {

    @Autowired
    private LargeCommitRepository largeCommitRepository;

    @GetMapping("/{teamId}/large-commits")
    public List<LargeCommit> getLargeCommitsByTeam(@PathVariable Long teamId) {
        return largeCommitRepository.findByTeamId(teamId);
    }

    @GetMapping("/{teamId}/repositories/{repositoryId}/large-commits")
    public List<LargeCommit> getLargeCommitsByRepository(
            @PathVariable Long teamId, @Path
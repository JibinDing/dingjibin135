To convert this project to a React-based TypeScript (`.tsx`) project, we'll break it down into steps. You already have an empty React project, so we'll focus on converting the HTML/CSS/JS into React components using TypeScript.

### Step 1: Setting up the Project

Assuming you have the React project set up with TypeScript, make sure your `package.json` includes these dependencies:

```json
"dependencies": {
  "react": "^18.0.0",
  "react-dom": "^18.0.0",
  "typescript": "^4.0.0"
}
```

### Step 2: Create the Components

1. **Task Interface**: We'll first define the `Task` interface in TypeScript to model a task with `text` and `completed` properties.

2. **App Component**: The main app component will handle the state and logic for adding tasks, completing tasks, deleting tasks, and rendering the task list.

### Step 3: Code Implementation

Let's break this down into `App.tsx`:

#### 1. `Task` Interface

We'll define the `Task` interface to represent each task.

```tsx
interface Task {
  text: string;
  completed: boolean;
}
```

#### 2. `App.tsx`

Here's the complete `App.tsx` implementation that includes adding, deleting, marking tasks as completed, and rendering the list of tasks:

```tsx
import React, { useState } from 'react';
import './App.css';  // Make sure you have CSS styles

interface Task {
  text: string;
  completed: boolean;
}

const App: React.FC = () => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [newTask, setNewTask] = useState<string>('');

  const addTask = () => {
    if (newTask.trim() === '') return;
    setTasks([...tasks, { text: newTask.trim(), completed: false }]);
    setNewTask('');
  };

  const completeTask = (index: number) => {
    const updatedTasks = [...tasks];
    updatedTasks[index].completed = true;
    setTasks(updatedTasks);
  };

  const deleteTask = (index: number) => {
    const updatedTasks = tasks.filter((_, i) => i !== index);
    setTasks(updatedTasks);
  };

  const totalTasks = tasks.length;
  const completedTasks = tasks.filter(task => task.completed).length;

  return (
    <div className="container">
      <h1>To-Do List</h1>
      <div className="task-input">
        <input
          type="text"
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
          placeholder="Add a new task..."
        />
        <button onClick={addTask}>Add Task</button>
      </div>
      <ul id="task-list">
        {tasks.map((task, index) => (
          <li key={index} className={task.completed ? 'completed' : ''}>
            <span>{task.text}</span>
            {task.completed && <span className="completed-label"> (Completed)</span>}
            <button onClick={() => completeTask(index)} disabled={task.completed} className="complete-btn">
              Complete
            </button>
            <button onClick={() => deleteTask(index)} className="delete-btn">
              Delete
            </button>
          </li>
        ))}
      </ul>
      <div className="summary">
        <p>Total Tasks: {totalTasks}</p>
        <p>Completed Tasks: {completedTasks}</p>
      </div>
    </div>
  );
};

export default App;
```

### Step 4: Add CSS

You can copy the same CSS from the previous implementation into a new file named `App.css`. Just make sure that the `.completed` class and button styling is included.

#### `App.css`

```css
body {
  font-family: Arial, sans-serif;
  background-color: #f0f0f0;
  margin: 0;
  padding: 20px;
}

.container {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  width: 300px;
  margin: 0 auto;
}

h1 {
  text-align: center;
}

.task-input {
  display: flex;
  gap: 5px;
  margin-bottom: 20px;
}

input[type="text"] {
  flex: 1;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  padding: 8px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  opacity: 0.9;
}

ul {
  list-style: none;
  padding: 0;
}

li {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin-bottom: 5px;
  background-color: #f9f9f9;
}

li.completed span {
  text-decoration: line-through;
  color: gray;
}

.complete-btn {
  background-color: #28a745;
  color: white;
}

.complete-btn[disabled] {
  background-color: gray;
}

.delete-btn {
  background-color: #dc3545;
  color: white;
}

.summary {
  margin-top: 20px;
  text-align: center;
}

.completed-label {
  color: green;
}
```

### Step 5: Add TypeScript Support for Event Handlers

Make sure the event handlers (like `onClick` and `onChange`) in your TypeScript code are typed properly. React TypeScript automatically infers the correct types for these handlers based on the usage, but you can make them explicit if needed.

- `onClick` is inferred as `React.MouseEventHandler<HTMLButtonElement>`.
- `onChange` is inferred as `React.ChangeEventHandler<HTMLInputElement>`.

### Step 6: Run the Project

To run the project:

1. Open a terminal in your project directory.
2. Run `npm start` or `yarn start`.

This will start the development server, and your React-based to-do list should now be running in the browser.

### Summary of Features in the React Version

- **Add Tasks**: Allows you to add a new task to the list.
- **Mark as Completed**: When you click the "Complete" button, the task will be marked as completed, and the button will be disabled.
- **Delete Tasks**: You can delete tasks using the "Delete" button.
- **Summary**: Displays the total number of tasks and the number of completed tasks.

Let me know if you'd like additional features or improvements!
Sure! To split the project into multiple components, we'll follow a modular approach. Each part of the functionality will be separated into its own component for better readability, reusability, and maintainability.

Here’s how we can organize the components:

1. **`App.tsx`**: The root component that will manage the overall state of the tasks.
2. **`TaskInput.tsx`**: A component to handle the task input and "Add Task" button.
3. **`TaskList.tsx`**: A component that renders the list of tasks.
4. **`TaskItem.tsx`**: A component for each individual task, containing the text, complete, and delete buttons.
5. **`TaskSummary.tsx`**: A component to display the total and completed task summary.

### Step 1: Create `TaskInput.tsx`

This component will handle adding new tasks.

```tsx
import React, { useState } from 'react';

interface TaskInputProps {
  onAddTask: (text: string) => void;
}

const TaskInput: React.FC<TaskInputProps> = ({ onAddTask }) => {
  const [newTask, setNewTask] = useState<string>('');

  const handleAddTask = () => {
    if (newTask.trim()) {
      onAddTask(newTask.trim());
      setNewTask('');
    }
  };

  return (
    <div className="task-input">
      <input
        type="text"
        value={newTask}
        onChange={(e) => setNewTask(e.target.value)}
        placeholder="Add a new task..."
      />
      <button onClick={handleAddTask}>Add Task</button>
    </div>
  );
};

export default TaskInput;
```

### Step 2: Create `TaskItem.tsx`

This component will handle rendering a single task, with complete and delete buttons.

```tsx
import React from 'react';

interface TaskItemProps {
  text: string;
  completed: boolean;
  onComplete: () => void;
  onDelete: () => void;
}

const TaskItem: React.FC<TaskItemProps> = ({ text, completed, onComplete, onDelete }) => {
  return (
    <li className={completed ? 'completed' : ''}>
      <span>{text}</span>
      {completed && <span className="completed-label"> (Completed)</span>}
      <button onClick={onComplete} disabled={completed} className="complete-btn">
        Complete
      </button>
      <button onClick={onDelete} className="delete-btn">
        Delete
      </button>
    </li>
  );
};

export default TaskItem;
```

### Step 3: Create `TaskList.tsx`

This component will render a list of `TaskItem` components. It will receive the list of tasks and pass down the necessary handlers for completing and deleting tasks.

```tsx
import React from 'react';
import TaskItem from './TaskItem';

interface Task {
  text: string;
  completed: boolean;
}

interface TaskListProps {
  tasks: Task[];
  onCompleteTask: (index: number) => void;
  onDeleteTask: (index: number) => void;
}

const TaskList: React.FC<TaskListProps> = ({ tasks, onCompleteTask, onDeleteTask }) => {
  return (
    <ul id="task-list">
      {tasks.map((task, index) => (
        <TaskItem
          key={index}
          text={task.text}
          completed={task.completed}
          onComplete={() => onCompleteTask(index)}
          onDelete={() => onDeleteTask(index)}
        />
      ))}
    </ul>
  );
};

export default TaskList;
```

### Step 4: Create `TaskSummary.tsx`

This component will display the total number of tasks and the number of completed tasks.

```tsx
import React from 'react';

interface TaskSummaryProps {
  totalTasks: number;
  completedTasks: number;
}

const TaskSummary: React.FC<TaskSummaryProps> = ({ totalTasks, completedTasks }) => {
  return (
    <div className="summary">
      <p>Total Tasks: {totalTasks}</p>
      <p>Completed Tasks: {completedTasks}</p>
    </div>
  );
};

export default TaskSummary;
```

### Step 5: Update `App.tsx`

Now that we have modular components, we’ll update the main `App.tsx` component to manage the state of the tasks and pass the relevant data and handlers to these components.

```tsx
import React, { useState } from 'react';
import './App.css';
import TaskInput from './TaskInput';
import TaskList from './TaskList';
import TaskSummary from './TaskSummary';

interface Task {
  text: string;
  completed: boolean;
}

const App: React.FC = () => {
  const [tasks, setTasks] = useState<Task[]>([]);

  const addTask = (text: string) => {
    setTasks([...tasks, { text, completed: false }]);
  };

  const completeTask = (index: number) => {
    const updatedTasks = [...tasks];
    updatedTasks[index].completed = true;
    setTasks(updatedTasks);
  };

  const deleteTask = (index: number) => {
    const updatedTasks = tasks.filter((_, i) => i !== index);
    setTasks(updatedTasks);
  };

  const totalTasks = tasks.length;
  const completedTasks = tasks.filter((task) => task.completed).length;

  return (
    <div className="container">
      <h1>To-Do List</h1>
      <TaskInput onAddTask={addTask} />
      <TaskList tasks={tasks} onCompleteTask={completeTask} onDeleteTask={deleteTask} />
      <TaskSummary totalTasks={totalTasks} completedTasks={completedTasks} />
    </div>
  );
};

export default App;
```

### Step 6: Run the Project

1. **Make sure all the files are in the `src` folder** and the CSS is in `App.css`.
2. **Run** `npm start` or `yarn start` to start the development server.

Now, your React TypeScript project is modular, with components for task input, task list, task items, and task summary.

### Summary of Components:
1. **`App.tsx`**: Manages the state of the app.
2. **`TaskInput.tsx`**: Handles the input for new tasks.
3. **`TaskList.tsx`**: Renders the list of tasks.
4. **`TaskItem.tsx`**: Handles each individual task.
5. **`TaskSummary.tsx`**: Displays the task summary.

This structure makes the project easier to maintain and expand in the future. Let me know if you'd like to enhance or adjust it further!